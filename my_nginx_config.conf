# /etc/nginx/sites-available/graphql

# Main server block for handling HTTPS requests
server {
    listen 443 ssl http2; # Added http2 for potential performance benefits
    server_name api.airyvibe.com;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    # Modern secure cipher suite (You might adjust based on compatibility needs)
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m; # Basic session caching
    ssl_session_timeout 10m;
    ssl_session_tickets off; # Consider security implications if enabling tickets

    # SSL certificates (Corrected path for key)
    ssl_certificate /etc/letsencrypt/live/api.airyvibe.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.airyvibe.com/privkey.pem; 
    # Optional: OCSP Stapling for performance/privacy
    # ssl_trusted_certificate /etc/letsencrypt/live/api.airyvibe.com/chain.pem;
    # ssl_stapling on;
    # ssl_stapling_verify on;

    # Optional: Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self'; object-src 'none'; frame-ancestors 'none';" always; # Adjust CSP as needed

    # Root location block - Proxy requests for /graph to the backend
    location /graphql { 
        # **IMPORTANT FIXES APPLIED HERE:**
        # 1. Use 'http' because the backend server uses node:http.
        # 2. Use the correct backend path '/graphql' as indicated by Yoga default/log.
        # 3. No trailing slash needed here as we map /graphql directly to /graphql.
        proxy_pass http://localhost:4000/graphql; 

        proxy_http_version 1.1;
        # Headers for WebSocket support (if needed for GraphQL Subscriptions)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        # Standard proxy headers
        proxy_set_header Host $host; # Passes the original Host header
        proxy_set_header X-Real-IP $remote_addr; # Passes the real client IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Passes the original scheme (http/https)
        proxy_cache_bypass $http_upgrade;

        # CORS headers - Applied to all proxied responses for /graphql
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        # add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handling CORS preflight OPTIONS requests specifically for /graphql
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000; # Cache preflight response for 20 days
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            # Return 204 No Content for OPTIONS requests
            return 204;
        }
    }

    # Optional: Favicon and robots.txt handling to avoid polluting logs
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    # Optional: Deny access to hidden files
    location ~ /\. { deny all; }
}

# Redirect HTTP requests to HTTPS
server {
    listen 80;
    server_name api.airyvibe.com;

    # Optional: Handle ACME challenges for Let's Encrypt over HTTP
    # location ~ /.well-known/acme-challenge/ {
    #     root /var/www/html; # Or your webroot used by certbot
    #     allow all;
    # }

    # Redirect all other HTTP requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}